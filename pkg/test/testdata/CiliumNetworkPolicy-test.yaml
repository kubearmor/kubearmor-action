apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: checkoutservice-netpol
spec:
  endpointSelector:
    matchLabels:
      app: checkoutservice
  egress:
  - toEndpoints:
    - matchLabels:
        app: emailservice
    toPorts:
    - ports:
      - port: "8080"
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        app: paymentservice
    toPorts:
    - ports:
      - port: "50051"
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        app: productcatalogservice
    toPorts:
    - ports:
      - port: "3550"
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        app: cartservice
    toPorts:
    - ports:
      - port: "7070"
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        app: currencyservice
    toPorts:
    - ports:
      - port: "7000"
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        app: shippingservice
    toPorts:
    - ports:
      - port: "50051"
        protocol: TCP
  - toEndpoints:
    - matchLabels:
        k8s-app: kube-dns
    toPorts:
    - ports:
      - port: "53"
        protocol: UDP
  ingress:
  - fromEndpoints:
    - matchLabels:
        app: frontend
    fromPorts:
    - ports:
      - port: "5050"
        protocol: TCP
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: emailservice-netpol
spec:
  endpointSelector:
    matchLabels:
      app: emailservice
  egress: []
  ingress:
  - fromEndpoints:
    - matchLabels:
        app: checkoutservice
    fromPorts:
    - ports:
      - port: "8080"
        protocol: TCP
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: frontend-netpol
spec:
  egress:
  - toPorts:
    - ports:
      - port: "5050"
        protocol: TCP
    toEndpoints:
    - matchLabels:
        app: checkoutservice
  - toPorts:
    - ports:
      - port: "8080"
        protocol: TCP
    toEndpoints:
    - matchLabels:
        app: recommendationservice
  - toPorts:
    - ports:
      - port: "3550"
        protocol: TCP
    toEndpoints:
    - matchLabels:
        app: productcatalogservice
  - toPorts:
    - ports:
      - port: "7070"
        protocol: TCP
    toEndpoints:
    - matchLabels:
        app: cartservice
  - toPorts:
    - ports:
      - port: "7000"
        protocol: TCP
    toEndpoints:
    - matchLabels:
        app: currencyservice
  - toPorts:
    - ports:
      - port: "50051"
        protocol: TCP
    toEndpoints:
    - matchLabels:
        app: shippingservice
  - toPorts:
    - ports:
      - port: "9555"
        protocol: TCP
    toEndpoints:
    - matchLabels:
        app: adservice
  - toPorts:
    - ports:
      - port: "53"
        protocol: UDP
    toEntities:
    - cluster # this is equivalent to namespaceSelector and podSelector for kube-dns
  ingress:
  - fromPorts:
    - ports:
      - port: "8080"
        protocol: TCP
    fromEndpoints:
    # this is equivalent to podSelector with empty selector {}
    # which means any pod in the same namespace as frontend pod can communicate with it on port 8080
    # alternatively, you can use fromEntities with value cluster or world 
    # depending on whether you want to allow pods from other namespaces or not
    # see https://docs.cilium.io/en/latest/security/policy/#entities-based for more details
    # fromEntities:
    #   cluster 
  - fromPorts:
    - ports:
      - port: "8080"
        protocol: TCP
    fromEndpoints:
    # this is equivalent to podSelector with matchLabels app=loadgenerator
    # which means only pods with label app=loadgenerator can communicate with frontend pod on port 8080 
    # note that this rule is redundant because the previous rule already allows any pod in the same namespace as frontend pod 
    # so you can remove it if you want 
    # see https://docs.cilium.io/en/latest/security/policy/#rule-ordering for more details 
      matchLabels:
        app: loadgenerator  
  endpointSelector:
    matchLabels:
      app: frontend
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: recommendationservice-netpol
spec:
  egress:
  - toPorts:
    - ports:
      - port: "3550"
        protocol: TCP
    toEndpoints:
    - matchLabels:
        app: productcatalogservice
  - toPorts:
    - ports:
      - port: "53"
        protocol: UDP
    toEntities:
    - cluster # this is equivalent to namespaceSelector and podSelector for kube-dns
  ingress:
  - fromPorts:
    - ports:
      - port: "8080"
        protocol: TCP
    fromEndpoints:
    - matchLabels:
        app: frontend
  endpointSelector:
    matchLabels:
      app: recommendationservice
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: emailservice-netpol
spec:
  egress: []
  ingress:
  - fromPorts:
    - ports:
      - port: "8080"
        protocol: TCP
    fromEndpoints:
    - matchLabels:
        app: checkoutservice
  endpointSelector:
    matchLabels:
      app: emailservice
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: paymentservice-netpol
spec:
  egress: []
  ingress:
  - fromPorts:
    - ports:
      - port: "50051"
        protocol: TCP
    fromEndpoints:
    - matchLabels:
        app: checkoutservice
  endpointSelector:
    matchLabels:
      app: paymentservice
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: productcatalogservice-netpol
spec:
  egress: []
  ingress:
  - fromPorts:
    - ports:
      - port: "3550"
        protocol: TCP
    fromEndpoints:
    - matchLabels:
        app: checkoutservice
  - fromPorts:
    - ports:
      - port: "3550"
        protocol: TCP
    fromEndpoints:
    - matchLabels:
        app: recommendationservice
  - fromPorts:
    - ports:
      - port: "3550"
        protocol: TCP
    fromEndpoints:
    - matchLabels:
        app: frontend
  endpointSelector:
    matchLabels:
      app: productcatalogservice
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: cartservice-netpol
spec:
  egress:
  - toPorts:
    - ports:
      - port: "6379"
        protocol: TCP
    toEndpoints:
    - matchLabels:
        app: redis-cart
  - toPorts:
    - ports:
      - port: "53"
        protocol: UDP
    toEntities:
    - cluster # this is equivalent to namespaceSelector and podSelector for kube-dns
  ingress:
  - fromPorts:
    - ports:
      - port: "7070"
        protocol: TCP
    fromEndpoints:
    - matchLabels:
        app: checkoutservice
  - fromPorts:
    - ports:
      - port: "7070"
        protocol: TCP
    fromEndpoints:
    - matchLabels:
        app: frontend
  endpointSelector:
    matchLabels:
      app: cartservice
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: currencyservice-netpol
spec:
  egress: []
  ingress:
  - fromPorts:
    - ports:
      - port: "7000"
        protocol: TCP
    fromEndpoints:
    - matchLabels:
        app: checkoutservice
  - fromPorts:
    - ports:
      - port: "7000"
        protocol: TCP
    fromEndpoints:
    - matchLabels:
        app: frontend
  endpointSelector:
    matchLabels:
      app: currencyservice
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: shippingservice-netpol
spec:
  egress: []
  ingress:
  - fromPorts:
    - ports:
      - port: "50051"
        protocol: TCP
    fromEndpoints:
    - matchLabels:
        app: checkoutservice
  - fromPorts:
    - ports:
      - port: "50051"
        protocol: TCP
    fromEndpoints:
    - matchLabels:
        app: frontend
  endpointSelector:
    matchLabels:
      app: shippingservice
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: redis-cart-netpol
spec:
  egress: []
  ingress:
  - fromPorts:
    - ports:
      - port: "6379"
        protocol: TCP
    fromEndpoints:
    - matchLabels:
        app: cartservice
  endpointSelector:
    matchLabels:
      app: redis-cart
---
apiVersion: cilium.io/v2
kind: CiliumNetworkPolicy
metadata:
  name: adservice-netpol
spec:
  endpointSelector:
    matchLabels:
      app: adservice
  egress: []
  ingress:
  - fromEndpoints:
    - matchLabels:
        app: frontend
    fromPorts:
    - ports:
      - port: "9555"
        protocol: TCP