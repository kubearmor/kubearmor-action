# SPDX-License-Identifier: Apache-2.0
# Copyright 2023 Authors of KubeArmor

name: 'kubearmor-action'
description: 'kubearmor-action'
inputs:
  old-app-image-name:  # old app docker image name
    description: 'Old app docker image name'
    required: true
  new-app-image-name:  # new app docker image name
    description: 'New app docker image name'
    required: true
  filepath: # file path to store baseline and updated file
    description: 'File path to store baseline and updated file'
    required: flase
    default: '/tmp'
outputs:
  visualisation-results-artifact:
    description: The name of the artifact containing the visualisation report
    value: ${{ steps.output-results.outputs.visualisation-artifact }}
  sys-visualisation-image:
    description: The name of the actual file in the artifact, which contains the system visualisation report
    value: ${{ steps.output-results.outputs.sys-visualisation-image }}
  network-visualisation-image:
    description: The name of the actual file in the artifact, which contains the network visualisation report
    value: ${{ steps.output-results.outputs.network-visualisation-image }}
    
runs:
  using: composite
  steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        repository: kubearmor/kubearmor-action
        ref: dev
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'
      env:
        GOPATH: ${{ runner.workspace }}
        GO111MODULE: "on"
    # Install kubearmor components
    # - name: Install kubearmor components
    #   uses: kubearmor/kubearmor-action/actions/install-kubearmor@dev
    # - name: get pod
    #   run: kubectl get po -A
    #   shell: bash
    # Excuting the main logic of kubearmor-action by invoke binary file
    # - name: Execute
    #   run: node ${{ github.action_path }}/invoke-binary.js
    #   env:
    #     # pass inputs to env FYI: https://github.com/actions/runner/issues/665
    #     INPUT_OLD-APP-IMAGE-NAME: ${{ inputs.old-app-image-name }}
    #     INPUT_NEW-APP-IMAGE-NAME: ${{ inputs.new-app-image-name }}
    #     INPUT_FILEPATH: ${{ inputs.filepath }}
    #   shell: bash
    # - name: get pod
    #   run: kubectl get po -A
    #   shell: bash
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    - name: Install graphviz
      run: |
        sudo apt-get install -y graphviz
      shell: bash
    - name: Visulisation
      run: |
        make build-visual-cli
        # karmor summary -n app > summary.json && cat summary.json
        ./visual system -f ${PWD}/test/testdata/test-summary-data.json -o app_sys.png
        ./visual network -f ${PWD}/test/testdata/test-summary-data.json -o app_network.png
      shell: bash
    - name: Upload Image
      id: app_visulisation
      uses: actions/upload-artifact@v2
      with:
        name: app_visulisation
        path: |
          app_sys.png
          app_network.png
    - name: Set outputs
      id: output-results
      run: |
        echo "::set-output name=visualisation-artifact::app_visulisation"
        echo "::set-output name=sys-visualisation-image::app_sys.png"
        echo "::set-output name=network-visualisation-image::app_network.png"
      shell: bash